{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# IFN-646 Project: Images Classification of Breast Cancer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Description\n",
    "\n",
    "In this file, we will perform how we run the classifiers to classify which case considered as **BENIGN** or **MALIGNANT**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Cleaning and Wrangling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this section of code, we will do the Data cleaning and Wrangling including do the stratified sampling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-2-27c6d28da986>:32: FutureWarning: Passing a negative integer is deprecated in version 1.0 and will not be supported in future version. Instead, use None to not limit the column width.\n",
      "  pd.set_option('display.max_colwidth', -1)\n"
     ]
    }
   ],
   "source": [
    "#Import Library needed\n",
    "import pandas as pd\n",
    "import os\n",
    "import re\n",
    "import numpy as np\n",
    "import scipy\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import auc\n",
    "import matplotlib.pyplot as plt\n",
    "from PIL import Image, ImageOps\n",
    "import cv2\n",
    "\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "from tensorboard import notebook\n",
    "from tensorflow.keras.applications.resnet50 import ResNet50\n",
    "from tensorflow.keras.applications.efficientnet import EfficientNetB0\n",
    "from tensorflow.keras.applications.efficientnet import EfficientNetB3\n",
    "from tensorflow.keras.preprocessing.image import Iterator\n",
    "from tensorflow.keras.layers import Input, Flatten, Dense, Conv2D, AveragePooling2D, MaxPooling2D, UpSampling2D, concatenate, BatchNormalization, SpatialDropout2D, Activation\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras import models\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from tensorflow.keras import regularizers\n",
    "from tensorflow.keras.utils import plot_model\n",
    "import tensorflow.keras.backend as K\n",
    "import IPython\n",
    "tf.keras.backend.clear_session()\n",
    "pd.set_option('display.max_colwidth', -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function to set the subject ID for calc and mass dataset\n",
    "def generate_full_mask(name, file):\n",
    "    df_full = pd.read_csv(file)\n",
    "    df_full[['assessment', 'abnormality id']] = df_full[['assessment', 'abnormality id']].astype(str)\n",
    "    df_full['Subject ID'] = name+df_full['patient_id']+'_'+df_full['left or right breast']+'_'+df_full['image view']\n",
    "    df_mask = pd.read_csv(file)\n",
    "    df_mask[['assessment', 'abnormality id']] = df_mask[['assessment', 'abnormality id']].astype(str)\n",
    "    df_mask['Subject ID'] = name+df_mask['patient_id']+'_'+df_mask['left or right breast']+'_'+df_mask['image view']+'_'+df_mask['abnormality id']\n",
    "    df_full = df_full.drop_duplicates(subset=['Subject ID'], keep='first')\n",
    "    df_mask = df_mask.drop_duplicates(subset=['Subject ID'], keep='first')\n",
    "    return df_full, df_mask\n",
    "\n",
    "#Function to get the pathfile\n",
    "def get_name(directory):\n",
    "\n",
    "    names = []\n",
    "\n",
    "    for root, dirs, files in os.walk(directory):\n",
    "        for filename in files:\n",
    "            _, ext = os.path.splitext(filename)\n",
    "            if ext in ['.png']:\n",
    "                names.append(os.path.join(root, filename))\n",
    "\n",
    "    return names\n",
    "\n",
    "def merge_path(data1, data2, tpe):\n",
    "    #Select necessary column to match with metadata from calc and mass dataset\n",
    "    data1 = data1.iloc[:,[8,9,14]]\n",
    "    data2 = data2.iloc[:,[8,9,14]]\n",
    "    merge1 = pd.merge(data1, result, on='Subject ID', how='inner')\n",
    "    merge2 = pd.merge(data2, result, on='Subject ID', how='inner')\n",
    "    #Only select the mask file, which start with 1-2.dcm (Thus keep the last)\n",
    "    merge2 = merge2.drop_duplicates(subset=['Subject ID'], keep='last')\n",
    "    #Re-index the dataframe\n",
    "    merge1 = merge1.reindex(columns=['Subject ID','assessment','pathology','Match','Pathfile'])\n",
    "    merge2 = merge2.reindex(columns=['Subject ID','assessment','pathology','Match','Pathfile'])\n",
    "    #Change the Benign Without Callback to Benign\n",
    "    merge1['pathology'] = merge1['pathology'].replace(['BENIGN_WITHOUT_CALLBACK'],'BENIGN')\n",
    "    merge2['pathology'] = merge2['pathology'].replace(['BENIGN_WITHOUT_CALLBACK'],'BENIGN')\n",
    "    #Rename the pathfile into mask for mask dataset before merge\n",
    "    merge2 = merge2.rename(columns={\"Pathfile\" : \"Mask\"})\n",
    "    #Rename the subject ID for mask dataset before mergex\n",
    "    merge2['Subject ID'] = merge2['Subject ID'].str[:-2]\n",
    "    #merge two dataframe into one with pathfile for mask and raw image\n",
    "    merge = pd.merge(merge1, merge2, on=['Subject ID','assessment','pathology'], how='inner')\n",
    "    #keep neccessary column\n",
    "    merge = merge.iloc[:,[0,1,2,4,6]]\n",
    "    #make new column to help sampling\n",
    "    merge['assessment'] = merge['assessment'].astype(int)\n",
    "    conditions = [(merge['assessment'] == 4),(merge['assessment'] < 4),(merge['assessment'] > 4)]\n",
    "    choices = [2, 1, 3]\n",
    "    # Add new column based on conditions and choices:\n",
    "    merge['sampling'] = np.select(conditions, choices, default='error')\n",
    "    merge['sampling'] = merge['sampling'].astype(int)\n",
    "    merge['type'] = tpe\n",
    "    return merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Initiate dataset\n",
    "calc_train_full, calc_train_mask = generate_full_mask('Calc-Training_','calc_case_description_train_set.csv')\n",
    "calc_test_full, calc_test_mask = generate_full_mask('Calc-Test_', 'calc_case_description_test_set.csv')\n",
    "mass_train_full, mass_train_mask = generate_full_mask('Mass-Training_','mass_case_description_train_set.csv')\n",
    "mass_test_full, mass_test_mask = generate_full_mask('Mass-Test_','mass_case_description_test_set.csv')\n",
    "metadata = pd.read_csv('metadata.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Initiate the variable to get the pathfile for each images\n",
    "names = get_name('CBIS-DDSM')\n",
    "#Make it into dataframe\n",
    "names = pd.DataFrame(names,columns=['Pathfile'])\n",
    "#Make the Match Column to match with File Location in metadata\n",
    "names['Match'] = names['Pathfile'].str[:-12]\n",
    "#Make a new column called Match for joining the metadata with pathfile from names\n",
    "metadata['Match'] = metadata['File Location'].str[2:]\n",
    "#Drop unnecessary column from metadata\n",
    "metadata = metadata.iloc[:,[4,17]]\n",
    "#Merge the new PNG pathfile to metadata\n",
    "result = pd.merge(metadata, names, on='Match', how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Pathfile for each dataset\n",
    "calc_train = merge_path(calc_train_full,calc_train_mask, 'calc')\n",
    "calc_test = merge_path(calc_test_full,calc_test_mask, 'calc')\n",
    "mass_train = merge_path(mass_train_full,mass_train_mask, 'mass')\n",
    "mass_test = merge_path(mass_test_full,mass_test_mask, 'mass')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# concat calc and mass dataset\n",
    "training = pd.concat([calc_train, mass_train])\n",
    "test = pd.concat([calc_test, mass_test])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def split(data, stratify, size):\n",
    "    rs = 10\n",
    "    # target/input split\n",
    "    Y = data.loc[:,['pathology']]\n",
    "    X = data.drop(['pathology'], axis=1)\n",
    "    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=size, \n",
    "                                                        stratify=data[stratify], \n",
    "                                                        random_state=rs)\n",
    "    return X_test, Y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create the assess 4 dataframe\n",
    "assess_4 = training.loc[training['sampling'] == 2]\n",
    "#sampling the data (50% from sampling data will be based on this data, so the proportion is 0.3*0.5)\n",
    "sample_4, target_4 = split(assess_4, ['pathology','type'], 0.1)\n",
    "#create the assess 1-3 and 4-6\n",
    "assess_1 = training.loc[training['sampling'] == 1]\n",
    "#sampling\n",
    "sample_1, target_1 = split(assess_1, ['pathology','type'], 0.3)\n",
    "#create the assess 1-3 and 4-6\n",
    "assess_5 = training.loc[training['sampling'] == 3]\n",
    "#sampling\n",
    "sample_5, target_5 = split(assess_5, ['pathology','type'], 0.3)\n",
    "#merge sampling\n",
    "training_sample = pd.concat([sample_1, sample_4, sample_5])\n",
    "training_target = pd.concat([target_1, target_4, target_5])\n",
    "training_target['encode'] = np.where(training_target['pathology'] != 'BENIGN', 0, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "598"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(training_sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAEqCAYAAADu0BDXAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAUA0lEQVR4nO3df6zdd33f8ecLJw0MSEmWm8i1HRyoq+HQ1oFbN1uqjRGYXajmUJrNacvSKZOZlDBYmbaEaYJqcpcNUtR2A8mIDGttk7ojCLeQspAGtZQuwUlDEidksYibGHv2LbRrUlZ3dt7743xNTuxzf9j3nnNyP+f5kK7O9/v5fr/nvCzZr/v153y/56SqkCS15SXjDiBJWnqWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSg84adwCACy64oNauXTvuGJK0rNx///1/WlVTg7a9KMp97dq17NmzZ9wxJGlZSfIns21zWkaSGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUoBfFTUzLxdobPzfuCE3Zf/Pbxx1BapZn7pLUIMtdkhpkuUtSgyx3SWrQvOWe5KVJ7kvytSR7k/xCN/6hJN9M8mD387a+Y25Ksi/J40k2DfMPIEk61UKuljkKvLmqnk1yNvDlJHd22z5aVR/p3znJemArcCnwfcAXk/xAVR1fyuCSpNnNe+ZePc92q2d3PzXHIVuA26vqaFU9CewDNi46qSRpwRY0555kRZIHgSPAXVV1b7fphiQPJbk1yXnd2Crg6b7DD3RjkqQRWVC5V9XxqtoArAY2Jnk98HHgtcAG4BBwS7d7Bj3FyQNJtiXZk2TPzMzMGUSXJM3mtK6Wqao/B74EbK6qw13pPwd8guenXg4Aa/oOWw0cHPBcO6pquqqmp6YGfgWgJOkMLeRqmakkr+qWXwa8Bfh6kpV9u70DeKRb3g1sTXJOkkuAdcB9S5pakjSnhVwtsxLYmWQFvV8Gu6rqd5L8tyQb6E257AfeDVBVe5PsAh4FjgHXe6WMJI3WvOVeVQ8Blw0Yf9ccx2wHti8umiTpTHmHqiQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDXIcpekBlnuktSgecs9yUuT3Jfka0n2JvmFbvz8JHcleaJ7PK/vmJuS7EvyeJJNw/wDSJJOtZAz96PAm6vqh4ENwOYklwM3AndX1Trg7m6dJOuBrcClwGbgY0lWDCG7JGkW85Z79TzbrZ7d/RSwBdjZje8EruqWtwC3V9XRqnoS2AdsXMrQkqS5LWjOPcmKJA8CR4C7qupe4KKqOgTQPV7Y7b4KeLrv8APdmCRpRBZU7lV1vKo2AKuBjUleP8fuGfQUp+yUbEuyJ8memZmZBYWVJC3MaV0tU1V/DnyJ3lz64SQrAbrHI91uB4A1fYetBg4OeK4dVTVdVdNTU1Onn1ySNKuFXC0zleRV3fLLgLcAXwd2A9d2u10LfLZb3g1sTXJOkkuAdcB9S5xbkjSHsxawz0pgZ3fFy0uAXVX1O0n+CNiV5DrgKeBqgKram2QX8ChwDLi+qo4PJ74kaZB5y72qHgIuGzD+LeDKWY7ZDmxfdDpJ0hnxDlVJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDVo3nJPsibJPUkeS7I3yXu78Q8l+WaSB7uft/Udc1OSfUkeT7JpmH8ASdKpzlrAPseA91fVA0leCdyf5K5u20er6iP9OydZD2wFLgW+D/hikh+oquNLGVySNLt5z9yr6lBVPdAtPwM8Bqya45AtwO1VdbSqngT2ARuXIqwkaWFOa849yVrgMuDebuiGJA8luTXJed3YKuDpvsMOMOCXQZJtSfYk2TMzM3P6ySVJs1pwuSd5BfBp4H1V9RfAx4HXAhuAQ8AtJ3YdcHidMlC1o6qmq2p6amrqdHNLkuawoHJPcja9Yv/1qroDoKoOV9XxqnoO+ATPT70cANb0Hb4aOLh0kSVJ81nI1TIBPgk8VlW/1De+sm+3dwCPdMu7ga1JzklyCbAOuG/pIkuS5rOQq2WuAN4FPJzkwW7sA8A1STbQm3LZD7wboKr2JtkFPErvSpvrvVJGkkZr3nKvqi8zeB7983Mcsx3YvohckqRF8A5VSWqQ5S5JDbLcJalBlrskNWghV8tIWgbW3vi5cUdoxv6b3z7uCIvmmbskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDXIcpekBlnuktQgy12SGmS5S1KDLHdJatC85Z5kTZJ7kjyWZG+S93bj5ye5K8kT3eN5fcfclGRfkseTbBrmH0CSdKqFnLkfA95fVa8DLgeuT7IeuBG4u6rWAXd363TbtgKXApuBjyVZMYzwkqTB5i33qjpUVQ90y88AjwGrgC3Azm63ncBV3fIW4PaqOlpVTwL7gI1LnFuSNIfTmnNPsha4DLgXuKiqDkHvFwBwYbfbKuDpvsMOdGOSpBFZcLkneQXwaeB9VfUXc+06YKwGPN+2JHuS7JmZmVloDEnSAiyo3JOcTa/Yf72q7uiGDydZ2W1fCRzpxg8Aa/oOXw0cPPk5q2pHVU1X1fTU1NSZ5pckDbCQq2UCfBJ4rKp+qW/TbuDabvla4LN941uTnJPkEmAdcN/SRZYkzeesBexzBfAu4OEkD3ZjHwBuBnYluQ54CrgaoKr2JtkFPErvSpvrq+r4UgeXJM1u3nKvqi8zeB4d4MpZjtkObF9ELknSIniHqiQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDXIcpekBlnuktQgy12SGjRvuSe5NcmRJI/0jX0oyTeTPNj9vK1v201J9iV5PMmmYQWXJM1uIWfunwI2Dxj/aFVt6H4+D5BkPbAVuLQ75mNJVixVWEnSwsxb7lX1+8C3F/h8W4Dbq+poVT0J7AM2LiKfJOkMLGbO/YYkD3XTNud1Y6uAp/v2OdCNnSLJtiR7kuyZmZlZRAxJ0snOtNw/DrwW2AAcAm7pxjNg3xr0BFW1o6qmq2p6amrqDGNIkgY5o3KvqsNVdbyqngM+wfNTLweANX27rgYOLi6iJOl0nVG5J1nZt/oO4MSVNLuBrUnOSXIJsA64b3ERJUmn66z5dkhyG/Am4IIkB4APAm9KsoHelMt+4N0AVbU3yS7gUeAYcH1VHR9KcknSrOYt96q6ZsDwJ+fYfzuwfTGhJEmL4x2qktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoPmLfcktyY5kuSRvrHzk9yV5Inu8by+bTcl2Zfk8SSbhhVckjS7hZy5fwrYfNLYjcDdVbUOuLtbJ8l6YCtwaXfMx5KsWLK0kqQFmbfcq+r3gW+fNLwF2Nkt7wSu6hu/vaqOVtWTwD5g49JElSQt1JnOuV9UVYcAuscLu/FVwNN9+x3oxiRJI7TUb6hmwFgN3DHZlmRPkj0zMzNLHEOSJtuZlvvhJCsBuscj3fgBYE3ffquBg4OeoKp2VNV0VU1PTU2dYQxJ0iBnWu67gWu75WuBz/aNb01yTpJLgHXAfYuLKEk6XWfNt0OS24A3ARckOQB8ELgZ2JXkOuAp4GqAqtqbZBfwKHAMuL6qjg8puyRpFvOWe1VdM8umK2fZfzuwfTGhJEmL4x2qktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoPm/Q7VuSTZDzwDHAeOVdV0kvOB3wTWAvuBf1RVf7a4mJKk07EUZ+5/v6o2VNV0t34jcHdVrQPu7tYlSSM0jGmZLcDObnkncNUQXkOSNIfFlnsB/yPJ/Um2dWMXVdUhgO7xwkW+hiTpNC1qzh24oqoOJrkQuCvJ1xd6YPfLYBvAxRdfvMgYkqR+izpzr6qD3eMR4DPARuBwkpUA3eORWY7dUVXTVTU9NTW1mBiSpJOccbkneXmSV55YBv4B8AiwG7i22+1a4LOLDSlJOj2LmZa5CPhMkhPP8xtV9btJvgrsSnId8BRw9eJjSpJOxxmXe1V9A/jhAePfAq5cTChJ0uJ4h6okNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDXIcpekBlnuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkho0tHJPsjnJ40n2JblxWK8jSTrVUMo9yQrgvwA/DqwHrkmyfhivJUk61bDO3DcC+6rqG1X118DtwJYhvZYk6SRnDel5VwFP960fAH60f4ck24Bt3eqzSR4fUpZJdAHwp+MOMZ/8x3En0Bj4d3NpvXq2DcMq9wwYqxesVO0Adgzp9Sdakj1VNT3uHNLJ/Ls5OsOaljkArOlbXw0cHNJrSZJOMqxy/yqwLsklSb4H2ArsHtJrSZJOMpRpmao6luQG4AvACuDWqto7jNfSQE536cXKv5sjkqqafy9J0rLiHaqS1CDLXZIaZLlLUoMsd0lD0V1UoTHxDdVlLsk9nHSDWJ+qqitHmUc6IckDVfWGceeYVMO6Q1Wj868GjF0O/GvgyIizSHqR8My9IUn+HvDvgHOAX6yqO8ccSRMsyTHgO4M20ftf5bkjjjRRPHNvQJJN9Er9r4DtVXXPmCNJAA9X1WXjDjGpLPdlLslXgSngw8AfdWPfneesqgfGFE3SGFnuy99fAs8CPwW8kxd+ImcBbx5HKAn4rXEHmGTOuUsaiiQfZO4ruf79KPNMGst9mUtyLnBRVT3RrV8NvKzb/IWqOjy2cJpoSd4/YPhvAP8M+JtV9YoRR5oolvsyl2QH8JWq+lS3vg+4k17BH6uqfz7GeBIASV4JvBe4DtgF3FJVXqo7RM65L38/Ary7b/2ZqnoPQJIvjyeS1JPkfODngZ8BdgJvqKo/G2+qyWC5L39n1Qv/+/WuvuVXjTiL9F1JPgz8JL3PcP/Bqnp2zJEmitMyy1ySrwGbqup/nzS+Crizqn5oPMk06ZI8BxwFjvHCN1a9iWkEPHNf/j4M/Hb35tUfd2NvAD7SbZPGoqr8YMIx8sy9AUk2Ax8ALu2GHgFu9uMH9GKT5OXAVcBPV9XbxxynaZa7pKFK8j3A24CfBjYDnwbuqKrfHmuwxlnuy1ySX2X2G0Woqn8xwjjSdyV5K3ANsAm4B/hN4Ferau04c00K59yXvz3jDiDN4gvAHwA/VlVPAiT55fFGmhyW+zJXVTvHnUGaxRuBrcAXk3wDuB1YMd5Ik8NpmWUuyX9l7s/vuG6UeaRBklxBb4rmncCDwGeqasdYQzXOcl/mkrxzwPDFwPuAFVW1erSJpNkleQnwVmBrVf3TcedpmeXekCSvoXdJ5N8FPgp8sqr+erypNKmSXDzX9qp6alRZJpHl3oAkrwP+LXAZvRuXfq2qjo03lSZdkofpTRme/B0DU8CFVeX8+xD5huoyl+S3gGl6d6T+S+A4cG7S+/dUVd8eXzpNsqr6wf71JGuBfwO8BfjFcWSaJJ65L3NJ9vP8G6onHk+cKVVVvWbkoaQ+SdbR+5/ljwK3ADur6v+NN1X7LHdJQ5Hk9fRK/VLgPwG3VdXx8aaaHJb7MpfkZ6vq17rlK6rqD/u23VBV/3l86TTJkhwHngY+R2+68AW8e3q4LPdlLskDVfWGk5cHrUujlOTnmPujMbwBb4h8Q3X5yyzLg9alkTnx1Y8aDz9vefmrWZYHrUsjk+THkvyTvvX/nuT3up83jzPbJHBaZplL8h1gH72z9Nd2y3Trr6mql48rmyZbkruB91TVo936w8DPAS8HPlBVm8cYr3lOyyx/rxt3AGkW554o9s4TVXU/QJL/MKZME8NyX+aq6k9OHktyAfCt8r9lGq9X9a9U1U/2rV402iiTxzn3ZS7J5Um+lOSOJJcleYTe1+wd7r5+TxqXryc55av0kvwE8PgY8kwU59yXuSR76H1Y2PcCO4Afr6r/meRv0btp5LKxBtTESvL99K5x/wrwQDf8RuDvAD9RVf9rXNkmgeW+zCV5sKo2dMuPVdXr+rb9seWucUpyDvAzPP/l7XuB36iqvxpfqsngnPvy91zf8v89aZu/uTVWVXUUuHXcOSaRZ+7LXHeL91/Su/TxZcB3TmwCXlpVZ48rmyZbkmcYfIIReh9qd+6II00Uy12SGuTVMpJGLonfwjRklrukcfBzj4bMcpc0Ds4HD5lXy0gaiiQ/P9sm4BWjzDKJLHdJw/LKObb98shSTCivlpE0ckl+pKq+Ou4cLfPMXdJIJFkPbAWuAf4PMD3eRG2z3CUNTZJX0yvza4BjwKuB6araP85ck8CrZSQNRZKvAJ8HzgZ+qqreCDxjsY+G5S5pWGboval6ETDVjfkm34j4hqqkoUnyvcA76U3LfD+9L/DYVFX3jTPXJLDcJY1EkouAf0zvTdU1VbVmzJGaZrlLGrkkrx70FZFaOl4tI2kokuyeZ5d/OJIgE8pylzQsfxt4GrgNuBc/LGyknJaRNBRJVgBvpfdm6g/R+z7V26pq71iDTQgvhZQ0FFV1vKp+t6quBS4H9gFfSvKeMUebCE7LSBqa7guy307v7H0t8CvAHePMNCmclpE0FEl2Aq8H7gRur6pHxhxpoljukoYiyXP0vrwdXnhnql+QPQKWuyQ1yDdUJalBlrskNchyl6QGWe6S1CDLXZIa9P8BpyKFLyU3ju4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Pathology plot from training sample\n",
    "training_target.pathology.value_counts().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Sampling the test dataset\n",
    "assess_4 = test.loc[test['sampling'] == 2]\n",
    "#sampling the data\n",
    "sample_4, target_4 = split(assess_4, ['pathology','type'], 0.1)\n",
    "#create the assess 1-3\n",
    "assess_1= test.loc[test['sampling'] == 1]\n",
    "#sampling\n",
    "sample_1, target_1 = split(assess_1, ['pathology','type'], 0.3)\n",
    "#create the assess 5-6\n",
    "assess_5 = test.loc[test['sampling'] == 3]\n",
    "#sampling\n",
    "sample_5, target_5 = split(assess_5, ['pathology','type'], 0.3)\n",
    "#merge sampling\n",
    "test_sample = pd.concat([sample_1, sample_4, sample_5])\n",
    "test_target = pd.concat([target_1, target_4, target_5])\n",
    "test_target['encode'] = np.where(test_target['pathology'] != 'BENIGN', 0, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "106"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(test_sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Pathology plot from test sample\n",
    "test_target.pathology.value_counts().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classifier - ResNet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function to load image\n",
    "def load_image(path, target_size, scale_factor):     \n",
    "    im = Image.open(path)\n",
    "    w, h = im.size\n",
    "    im = im.resize((target_size, target_size))\n",
    "    im=np.asarray(im) / scale_factor\n",
    "    return np.asarray(im)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "training_full_img = []\n",
    "training_mask_img = []\n",
    "test_full_img = []\n",
    "test_mask_img = []\n",
    "\n",
    "training_full = training_sample['Pathfile']\n",
    "training_mask = training_sample['Mask']\n",
    "test_full = test_sample['Pathfile']\n",
    "test_mask = test_sample['Mask']\n",
    "\n",
    "train_pathology = np.asarray(training_target['encode'])\n",
    "test_pathology = np.asarray(test_target['encode'])\n",
    "\n",
    "#iteration to read the image\n",
    "for path in training_full:\n",
    "    load = load_image(path,512,255.0)\n",
    "    training_full_img.append(load)\n",
    "for path in training_mask:\n",
    "    load = load_image(path,512,255.0)\n",
    "    training_mask_img.append(load)\n",
    "for path in test_full:\n",
    "    load = load_image(path,512,255.0)\n",
    "    test_full_img.append(load)\n",
    "for path in test_mask:\n",
    "    load = load_image(path,512,255.0)\n",
    "    test_mask_img.append(load)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "training_full_img = np.reshape(training_full_img, (len(training_full_img),512,512,1))\n",
    "training_mask_img = np.reshape(training_mask_img, (len(training_full_img),512,512,1))\n",
    "test_full_img = np.reshape(test_full_img, (len(test_full_img),512,512,1))\n",
    "test_mask_img = np.reshape(test_mask_img, (len(test_mask_img),512,512,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_pathology = keras.utils.to_categorical(train_pathology, 2)\n",
    "test_pathology = keras.utils.to_categorical(test_pathology, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 20 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Show image to check if it's load without error\n",
    "fig = plt.figure(figsize=[10, 10])\n",
    "for i in range(20):\n",
    "    ax = fig.add_subplot(4, 5, i + 1)\n",
    "    ax.imshow(training_full_img[i,:,:,:], cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"Eff_Classifier\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_3 (InputLayer)            [(None, 512, 512, 1) 0                                            \n",
      "__________________________________________________________________________________________________\n",
      "concatenate_2 (Concatenate)     (None, 512, 512, 3)  0           input_3[0][0]                    \n",
      "                                                                 input_3[0][0]                    \n",
      "                                                                 input_3[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "rescaling_2 (Rescaling)         (None, 512, 512, 3)  0           concatenate_2[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "normalization_2 (Normalization) (None, 512, 512, 3)  7           rescaling_2[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "stem_conv_pad (ZeroPadding2D)   (None, 513, 513, 3)  0           normalization_2[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "stem_conv (Conv2D)              (None, 256, 256, 32) 864         stem_conv_pad[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "stem_bn (BatchNormalization)    (None, 256, 256, 32) 128         stem_conv[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "stem_activation (Activation)    (None, 256, 256, 32) 0           stem_bn[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "block1a_dwconv (DepthwiseConv2D (None, 256, 256, 32) 288         stem_activation[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "block1a_bn (BatchNormalization) (None, 256, 256, 32) 128         block1a_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block1a_activation (Activation) (None, 256, 256, 32) 0           block1a_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block1a_se_squeeze (GlobalAvera (None, 32)           0           block1a_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block1a_se_reshape (Reshape)    (None, 1, 1, 32)     0           block1a_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block1a_se_reduce (Conv2D)      (None, 1, 1, 8)      264         block1a_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block1a_se_expand (Conv2D)      (None, 1, 1, 32)     288         block1a_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block1a_se_excite (Multiply)    (None, 256, 256, 32) 0           block1a_activation[0][0]         \n",
      "                                                                 block1a_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block1a_project_conv (Conv2D)   (None, 256, 256, 16) 512         block1a_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block1a_project_bn (BatchNormal (None, 256, 256, 16) 64          block1a_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block2a_expand_conv (Conv2D)    (None, 256, 256, 96) 1536        block1a_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block2a_expand_bn (BatchNormali (None, 256, 256, 96) 384         block2a_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block2a_expand_activation (Acti (None, 256, 256, 96) 0           block2a_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block2a_dwconv_pad (ZeroPadding (None, 257, 257, 96) 0           block2a_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block2a_dwconv (DepthwiseConv2D (None, 128, 128, 96) 864         block2a_dwconv_pad[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block2a_bn (BatchNormalization) (None, 128, 128, 96) 384         block2a_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block2a_activation (Activation) (None, 128, 128, 96) 0           block2a_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block2a_se_squeeze (GlobalAvera (None, 96)           0           block2a_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block2a_se_reshape (Reshape)    (None, 1, 1, 96)     0           block2a_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block2a_se_reduce (Conv2D)      (None, 1, 1, 4)      388         block2a_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block2a_se_expand (Conv2D)      (None, 1, 1, 96)     480         block2a_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block2a_se_excite (Multiply)    (None, 128, 128, 96) 0           block2a_activation[0][0]         \n",
      "                                                                 block2a_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block2a_project_conv (Conv2D)   (None, 128, 128, 24) 2304        block2a_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block2a_project_bn (BatchNormal (None, 128, 128, 24) 96          block2a_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block2b_expand_conv (Conv2D)    (None, 128, 128, 144 3456        block2a_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block2b_expand_bn (BatchNormali (None, 128, 128, 144 576         block2b_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block2b_expand_activation (Acti (None, 128, 128, 144 0           block2b_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block2b_dwconv (DepthwiseConv2D (None, 128, 128, 144 1296        block2b_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block2b_bn (BatchNormalization) (None, 128, 128, 144 576         block2b_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block2b_activation (Activation) (None, 128, 128, 144 0           block2b_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block2b_se_squeeze (GlobalAvera (None, 144)          0           block2b_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block2b_se_reshape (Reshape)    (None, 1, 1, 144)    0           block2b_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block2b_se_reduce (Conv2D)      (None, 1, 1, 6)      870         block2b_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block2b_se_expand (Conv2D)      (None, 1, 1, 144)    1008        block2b_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block2b_se_excite (Multiply)    (None, 128, 128, 144 0           block2b_activation[0][0]         \n",
      "                                                                 block2b_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block2b_project_conv (Conv2D)   (None, 128, 128, 24) 3456        block2b_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block2b_project_bn (BatchNormal (None, 128, 128, 24) 96          block2b_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block2b_drop (Dropout)          (None, 128, 128, 24) 0           block2b_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block2b_add (Add)               (None, 128, 128, 24) 0           block2b_drop[0][0]               \n",
      "                                                                 block2a_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block3a_expand_conv (Conv2D)    (None, 128, 128, 144 3456        block2b_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block3a_expand_bn (BatchNormali (None, 128, 128, 144 576         block3a_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block3a_expand_activation (Acti (None, 128, 128, 144 0           block3a_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block3a_dwconv_pad (ZeroPadding (None, 131, 131, 144 0           block3a_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block3a_dwconv (DepthwiseConv2D (None, 64, 64, 144)  3600        block3a_dwconv_pad[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block3a_bn (BatchNormalization) (None, 64, 64, 144)  576         block3a_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block3a_activation (Activation) (None, 64, 64, 144)  0           block3a_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block3a_se_squeeze (GlobalAvera (None, 144)          0           block3a_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block3a_se_reshape (Reshape)    (None, 1, 1, 144)    0           block3a_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block3a_se_reduce (Conv2D)      (None, 1, 1, 6)      870         block3a_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block3a_se_expand (Conv2D)      (None, 1, 1, 144)    1008        block3a_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block3a_se_excite (Multiply)    (None, 64, 64, 144)  0           block3a_activation[0][0]         \n",
      "                                                                 block3a_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block3a_project_conv (Conv2D)   (None, 64, 64, 40)   5760        block3a_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block3a_project_bn (BatchNormal (None, 64, 64, 40)   160         block3a_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block3b_expand_conv (Conv2D)    (None, 64, 64, 240)  9600        block3a_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block3b_expand_bn (BatchNormali (None, 64, 64, 240)  960         block3b_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block3b_expand_activation (Acti (None, 64, 64, 240)  0           block3b_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block3b_dwconv (DepthwiseConv2D (None, 64, 64, 240)  6000        block3b_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block3b_bn (BatchNormalization) (None, 64, 64, 240)  960         block3b_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block3b_activation (Activation) (None, 64, 64, 240)  0           block3b_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block3b_se_squeeze (GlobalAvera (None, 240)          0           block3b_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block3b_se_reshape (Reshape)    (None, 1, 1, 240)    0           block3b_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block3b_se_reduce (Conv2D)      (None, 1, 1, 10)     2410        block3b_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block3b_se_expand (Conv2D)      (None, 1, 1, 240)    2640        block3b_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block3b_se_excite (Multiply)    (None, 64, 64, 240)  0           block3b_activation[0][0]         \n",
      "                                                                 block3b_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block3b_project_conv (Conv2D)   (None, 64, 64, 40)   9600        block3b_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block3b_project_bn (BatchNormal (None, 64, 64, 40)   160         block3b_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block3b_drop (Dropout)          (None, 64, 64, 40)   0           block3b_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block3b_add (Add)               (None, 64, 64, 40)   0           block3b_drop[0][0]               \n",
      "                                                                 block3a_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4a_expand_conv (Conv2D)    (None, 64, 64, 240)  9600        block3b_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block4a_expand_bn (BatchNormali (None, 64, 64, 240)  960         block4a_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block4a_expand_activation (Acti (None, 64, 64, 240)  0           block4a_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block4a_dwconv_pad (ZeroPadding (None, 65, 65, 240)  0           block4a_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block4a_dwconv (DepthwiseConv2D (None, 32, 32, 240)  2160        block4a_dwconv_pad[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4a_bn (BatchNormalization) (None, 32, 32, 240)  960         block4a_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block4a_activation (Activation) (None, 32, 32, 240)  0           block4a_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block4a_se_squeeze (GlobalAvera (None, 240)          0           block4a_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4a_se_reshape (Reshape)    (None, 1, 1, 240)    0           block4a_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4a_se_reduce (Conv2D)      (None, 1, 1, 10)     2410        block4a_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4a_se_expand (Conv2D)      (None, 1, 1, 240)    2640        block4a_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block4a_se_excite (Multiply)    (None, 32, 32, 240)  0           block4a_activation[0][0]         \n",
      "                                                                 block4a_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block4a_project_conv (Conv2D)   (None, 32, 32, 80)   19200       block4a_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block4a_project_bn (BatchNormal (None, 32, 32, 80)   320         block4a_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block4b_expand_conv (Conv2D)    (None, 32, 32, 480)  38400       block4a_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4b_expand_bn (BatchNormali (None, 32, 32, 480)  1920        block4b_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block4b_expand_activation (Acti (None, 32, 32, 480)  0           block4b_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block4b_dwconv (DepthwiseConv2D (None, 32, 32, 480)  4320        block4b_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block4b_bn (BatchNormalization) (None, 32, 32, 480)  1920        block4b_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block4b_activation (Activation) (None, 32, 32, 480)  0           block4b_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block4b_se_squeeze (GlobalAvera (None, 480)          0           block4b_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4b_se_reshape (Reshape)    (None, 1, 1, 480)    0           block4b_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4b_se_reduce (Conv2D)      (None, 1, 1, 20)     9620        block4b_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4b_se_expand (Conv2D)      (None, 1, 1, 480)    10080       block4b_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block4b_se_excite (Multiply)    (None, 32, 32, 480)  0           block4b_activation[0][0]         \n",
      "                                                                 block4b_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block4b_project_conv (Conv2D)   (None, 32, 32, 80)   38400       block4b_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block4b_project_bn (BatchNormal (None, 32, 32, 80)   320         block4b_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block4b_drop (Dropout)          (None, 32, 32, 80)   0           block4b_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4b_add (Add)               (None, 32, 32, 80)   0           block4b_drop[0][0]               \n",
      "                                                                 block4a_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4c_expand_conv (Conv2D)    (None, 32, 32, 480)  38400       block4b_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block4c_expand_bn (BatchNormali (None, 32, 32, 480)  1920        block4c_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block4c_expand_activation (Acti (None, 32, 32, 480)  0           block4c_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block4c_dwconv (DepthwiseConv2D (None, 32, 32, 480)  4320        block4c_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block4c_bn (BatchNormalization) (None, 32, 32, 480)  1920        block4c_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block4c_activation (Activation) (None, 32, 32, 480)  0           block4c_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block4c_se_squeeze (GlobalAvera (None, 480)          0           block4c_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4c_se_reshape (Reshape)    (None, 1, 1, 480)    0           block4c_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4c_se_reduce (Conv2D)      (None, 1, 1, 20)     9620        block4c_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4c_se_expand (Conv2D)      (None, 1, 1, 480)    10080       block4c_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block4c_se_excite (Multiply)    (None, 32, 32, 480)  0           block4c_activation[0][0]         \n",
      "                                                                 block4c_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block4c_project_conv (Conv2D)   (None, 32, 32, 80)   38400       block4c_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block4c_project_bn (BatchNormal (None, 32, 32, 80)   320         block4c_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block4c_drop (Dropout)          (None, 32, 32, 80)   0           block4c_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block4c_add (Add)               (None, 32, 32, 80)   0           block4c_drop[0][0]               \n",
      "                                                                 block4b_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block5a_expand_conv (Conv2D)    (None, 32, 32, 480)  38400       block4c_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block5a_expand_bn (BatchNormali (None, 32, 32, 480)  1920        block5a_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block5a_expand_activation (Acti (None, 32, 32, 480)  0           block5a_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block5a_dwconv (DepthwiseConv2D (None, 32, 32, 480)  12000       block5a_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block5a_bn (BatchNormalization) (None, 32, 32, 480)  1920        block5a_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block5a_activation (Activation) (None, 32, 32, 480)  0           block5a_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block5a_se_squeeze (GlobalAvera (None, 480)          0           block5a_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5a_se_reshape (Reshape)    (None, 1, 1, 480)    0           block5a_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5a_se_reduce (Conv2D)      (None, 1, 1, 20)     9620        block5a_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5a_se_expand (Conv2D)      (None, 1, 1, 480)    10080       block5a_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block5a_se_excite (Multiply)    (None, 32, 32, 480)  0           block5a_activation[0][0]         \n",
      "                                                                 block5a_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block5a_project_conv (Conv2D)   (None, 32, 32, 112)  53760       block5a_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block5a_project_bn (BatchNormal (None, 32, 32, 112)  448         block5a_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block5b_expand_conv (Conv2D)    (None, 32, 32, 672)  75264       block5a_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5b_expand_bn (BatchNormali (None, 32, 32, 672)  2688        block5b_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block5b_expand_activation (Acti (None, 32, 32, 672)  0           block5b_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block5b_dwconv (DepthwiseConv2D (None, 32, 32, 672)  16800       block5b_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block5b_bn (BatchNormalization) (None, 32, 32, 672)  2688        block5b_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block5b_activation (Activation) (None, 32, 32, 672)  0           block5b_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block5b_se_squeeze (GlobalAvera (None, 672)          0           block5b_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5b_se_reshape (Reshape)    (None, 1, 1, 672)    0           block5b_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5b_se_reduce (Conv2D)      (None, 1, 1, 28)     18844       block5b_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5b_se_expand (Conv2D)      (None, 1, 1, 672)    19488       block5b_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block5b_se_excite (Multiply)    (None, 32, 32, 672)  0           block5b_activation[0][0]         \n",
      "                                                                 block5b_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block5b_project_conv (Conv2D)   (None, 32, 32, 112)  75264       block5b_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block5b_project_bn (BatchNormal (None, 32, 32, 112)  448         block5b_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block5b_drop (Dropout)          (None, 32, 32, 112)  0           block5b_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5b_add (Add)               (None, 32, 32, 112)  0           block5b_drop[0][0]               \n",
      "                                                                 block5a_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5c_expand_conv (Conv2D)    (None, 32, 32, 672)  75264       block5b_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block5c_expand_bn (BatchNormali (None, 32, 32, 672)  2688        block5c_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block5c_expand_activation (Acti (None, 32, 32, 672)  0           block5c_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block5c_dwconv (DepthwiseConv2D (None, 32, 32, 672)  16800       block5c_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block5c_bn (BatchNormalization) (None, 32, 32, 672)  2688        block5c_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block5c_activation (Activation) (None, 32, 32, 672)  0           block5c_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block5c_se_squeeze (GlobalAvera (None, 672)          0           block5c_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5c_se_reshape (Reshape)    (None, 1, 1, 672)    0           block5c_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5c_se_reduce (Conv2D)      (None, 1, 1, 28)     18844       block5c_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5c_se_expand (Conv2D)      (None, 1, 1, 672)    19488       block5c_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block5c_se_excite (Multiply)    (None, 32, 32, 672)  0           block5c_activation[0][0]         \n",
      "                                                                 block5c_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block5c_project_conv (Conv2D)   (None, 32, 32, 112)  75264       block5c_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block5c_project_bn (BatchNormal (None, 32, 32, 112)  448         block5c_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block5c_drop (Dropout)          (None, 32, 32, 112)  0           block5c_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block5c_add (Add)               (None, 32, 32, 112)  0           block5c_drop[0][0]               \n",
      "                                                                 block5b_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block6a_expand_conv (Conv2D)    (None, 32, 32, 672)  75264       block5c_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block6a_expand_bn (BatchNormali (None, 32, 32, 672)  2688        block6a_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block6a_expand_activation (Acti (None, 32, 32, 672)  0           block6a_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6a_dwconv_pad (ZeroPadding (None, 35, 35, 672)  0           block6a_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block6a_dwconv (DepthwiseConv2D (None, 16, 16, 672)  16800       block6a_dwconv_pad[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6a_bn (BatchNormalization) (None, 16, 16, 672)  2688        block6a_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block6a_activation (Activation) (None, 16, 16, 672)  0           block6a_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block6a_se_squeeze (GlobalAvera (None, 672)          0           block6a_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6a_se_reshape (Reshape)    (None, 1, 1, 672)    0           block6a_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6a_se_reduce (Conv2D)      (None, 1, 1, 28)     18844       block6a_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6a_se_expand (Conv2D)      (None, 1, 1, 672)    19488       block6a_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6a_se_excite (Multiply)    (None, 16, 16, 672)  0           block6a_activation[0][0]         \n",
      "                                                                 block6a_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6a_project_conv (Conv2D)   (None, 16, 16, 192)  129024      block6a_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6a_project_bn (BatchNormal (None, 16, 16, 192)  768         block6a_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block6b_expand_conv (Conv2D)    (None, 16, 16, 1152) 221184      block6a_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6b_expand_bn (BatchNormali (None, 16, 16, 1152) 4608        block6b_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block6b_expand_activation (Acti (None, 16, 16, 1152) 0           block6b_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6b_dwconv (DepthwiseConv2D (None, 16, 16, 1152) 28800       block6b_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block6b_bn (BatchNormalization) (None, 16, 16, 1152) 4608        block6b_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block6b_activation (Activation) (None, 16, 16, 1152) 0           block6b_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block6b_se_squeeze (GlobalAvera (None, 1152)         0           block6b_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6b_se_reshape (Reshape)    (None, 1, 1, 1152)   0           block6b_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6b_se_reduce (Conv2D)      (None, 1, 1, 48)     55344       block6b_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6b_se_expand (Conv2D)      (None, 1, 1, 1152)   56448       block6b_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6b_se_excite (Multiply)    (None, 16, 16, 1152) 0           block6b_activation[0][0]         \n",
      "                                                                 block6b_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6b_project_conv (Conv2D)   (None, 16, 16, 192)  221184      block6b_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6b_project_bn (BatchNormal (None, 16, 16, 192)  768         block6b_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block6b_drop (Dropout)          (None, 16, 16, 192)  0           block6b_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6b_add (Add)               (None, 16, 16, 192)  0           block6b_drop[0][0]               \n",
      "                                                                 block6a_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6c_expand_conv (Conv2D)    (None, 16, 16, 1152) 221184      block6b_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block6c_expand_bn (BatchNormali (None, 16, 16, 1152) 4608        block6c_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block6c_expand_activation (Acti (None, 16, 16, 1152) 0           block6c_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6c_dwconv (DepthwiseConv2D (None, 16, 16, 1152) 28800       block6c_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block6c_bn (BatchNormalization) (None, 16, 16, 1152) 4608        block6c_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block6c_activation (Activation) (None, 16, 16, 1152) 0           block6c_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block6c_se_squeeze (GlobalAvera (None, 1152)         0           block6c_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6c_se_reshape (Reshape)    (None, 1, 1, 1152)   0           block6c_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6c_se_reduce (Conv2D)      (None, 1, 1, 48)     55344       block6c_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6c_se_expand (Conv2D)      (None, 1, 1, 1152)   56448       block6c_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6c_se_excite (Multiply)    (None, 16, 16, 1152) 0           block6c_activation[0][0]         \n",
      "                                                                 block6c_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6c_project_conv (Conv2D)   (None, 16, 16, 192)  221184      block6c_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6c_project_bn (BatchNormal (None, 16, 16, 192)  768         block6c_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block6c_drop (Dropout)          (None, 16, 16, 192)  0           block6c_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6c_add (Add)               (None, 16, 16, 192)  0           block6c_drop[0][0]               \n",
      "                                                                 block6b_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block6d_expand_conv (Conv2D)    (None, 16, 16, 1152) 221184      block6c_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block6d_expand_bn (BatchNormali (None, 16, 16, 1152) 4608        block6d_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block6d_expand_activation (Acti (None, 16, 16, 1152) 0           block6d_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6d_dwconv (DepthwiseConv2D (None, 16, 16, 1152) 28800       block6d_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block6d_bn (BatchNormalization) (None, 16, 16, 1152) 4608        block6d_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block6d_activation (Activation) (None, 16, 16, 1152) 0           block6d_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block6d_se_squeeze (GlobalAvera (None, 1152)         0           block6d_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6d_se_reshape (Reshape)    (None, 1, 1, 1152)   0           block6d_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6d_se_reduce (Conv2D)      (None, 1, 1, 48)     55344       block6d_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6d_se_expand (Conv2D)      (None, 1, 1, 1152)   56448       block6d_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6d_se_excite (Multiply)    (None, 16, 16, 1152) 0           block6d_activation[0][0]         \n",
      "                                                                 block6d_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6d_project_conv (Conv2D)   (None, 16, 16, 192)  221184      block6d_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block6d_project_bn (BatchNormal (None, 16, 16, 192)  768         block6d_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "block6d_drop (Dropout)          (None, 16, 16, 192)  0           block6d_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block6d_add (Add)               (None, 16, 16, 192)  0           block6d_drop[0][0]               \n",
      "                                                                 block6c_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block7a_expand_conv (Conv2D)    (None, 16, 16, 1152) 221184      block6d_add[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block7a_expand_bn (BatchNormali (None, 16, 16, 1152) 4608        block7a_expand_conv[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "block7a_expand_activation (Acti (None, 16, 16, 1152) 0           block7a_expand_bn[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block7a_dwconv (DepthwiseConv2D (None, 16, 16, 1152) 10368       block7a_expand_activation[0][0]  \n",
      "__________________________________________________________________________________________________\n",
      "block7a_bn (BatchNormalization) (None, 16, 16, 1152) 4608        block7a_dwconv[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block7a_activation (Activation) (None, 16, 16, 1152) 0           block7a_bn[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "block7a_se_squeeze (GlobalAvera (None, 1152)         0           block7a_activation[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block7a_se_reshape (Reshape)    (None, 1, 1, 1152)   0           block7a_se_squeeze[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block7a_se_reduce (Conv2D)      (None, 1, 1, 48)     55344       block7a_se_reshape[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "block7a_se_expand (Conv2D)      (None, 1, 1, 1152)   56448       block7a_se_reduce[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block7a_se_excite (Multiply)    (None, 16, 16, 1152) 0           block7a_activation[0][0]         \n",
      "                                                                 block7a_se_expand[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block7a_project_conv (Conv2D)   (None, 16, 16, 320)  368640      block7a_se_excite[0][0]          \n",
      "__________________________________________________________________________________________________\n",
      "block7a_project_bn (BatchNormal (None, 16, 16, 320)  1280        block7a_project_conv[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "top_conv (Conv2D)               (None, 16, 16, 1280) 409600      block7a_project_bn[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "top_bn (BatchNormalization)     (None, 16, 16, 1280) 5120        top_conv[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "top_activation (Activation)     (None, 16, 16, 1280) 0           top_bn[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "max_pool (GlobalMaxPooling2D)   (None, 1280)         0           top_activation[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "dense_2 (Dense)                 (None, 2)            2562        max_pool[0][0]                   \n",
      "==================================================================================================\n",
      "Total params: 4,052,133\n",
      "Trainable params: 4,010,110\n",
      "Non-trainable params: 42,023\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "img_input = tf.keras.layers.Input(shape=(512, 512,1))\n",
    "img_conc = tf.keras.layers.Concatenate()([img_input, img_input, img_input])    \n",
    "efficient_net = EfficientNetB0(\n",
    "    weights='imagenet',\n",
    "    input_tensor=img_conc,\n",
    "    include_top=False,\n",
    "    pooling='max'\n",
    ")\n",
    "output = efficient_net.layers[-1].output\n",
    "output = Dense(2, activation='sigmoid')(output)\n",
    "model_cnn = keras.Model(inputs=efficient_net.input, outputs=output, name='Eff_Classifier')\n",
    "model_cnn.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_cnn.compile(optimizer=tf.keras.optimizers.Adam(), \n",
    "                  loss='binary_crossentropy', \n",
    "                  metrics=[tf.keras.metrics.CategoricalAccuracy()])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "19/19 [==============================] - 621s 33s/step - loss: 1.6159 - categorical_accuracy: 0.6003 - val_loss: 1.4388 - val_categorical_accuracy: 0.3962\n",
      "Epoch 2/10\n",
      "19/19 [==============================] - 633s 33s/step - loss: 0.7719 - categorical_accuracy: 0.7224 - val_loss: 0.6954 - val_categorical_accuracy: 0.6038\n",
      "Epoch 3/10\n",
      "19/19 [==============================] - 601s 32s/step - loss: 0.4948 - categorical_accuracy: 0.8227 - val_loss: 0.7561 - val_categorical_accuracy: 0.3962\n",
      "Epoch 4/10\n",
      "19/19 [==============================] - 605s 32s/step - loss: 0.3840 - categorical_accuracy: 0.8579 - val_loss: 0.7629 - val_categorical_accuracy: 0.3962\n",
      "Epoch 5/10\n",
      "19/19 [==============================] - 603s 32s/step - loss: 0.2807 - categorical_accuracy: 0.9080 - val_loss: 0.7565 - val_categorical_accuracy: 0.6038\n",
      "Epoch 6/10\n",
      "19/19 [==============================] - 598s 31s/step - loss: 0.1769 - categorical_accuracy: 0.9365 - val_loss: 0.7948 - val_categorical_accuracy: 0.6038\n",
      "Epoch 7/10\n",
      "19/19 [==============================] - 615s 32s/step - loss: 0.1268 - categorical_accuracy: 0.9515 - val_loss: 0.7402 - val_categorical_accuracy: 0.6038\n",
      "Epoch 8/10\n",
      "19/19 [==============================] - 631s 33s/step - loss: 0.0967 - categorical_accuracy: 0.9749 - val_loss: 0.8130 - val_categorical_accuracy: 0.3679\n",
      "Epoch 9/10\n",
      "19/19 [==============================] - 584s 31s/step - loss: 0.0804 - categorical_accuracy: 0.9732 - val_loss: 0.8716 - val_categorical_accuracy: 0.4057\n",
      "Epoch 10/10\n",
      "19/19 [==============================] - 592s 31s/step - loss: 0.0437 - categorical_accuracy: 0.9883 - val_loss: 0.8450 - val_categorical_accuracy: 0.6038\n"
     ]
    }
   ],
   "source": [
    "history = model_cnn.fit(training_full_img,train_pathology,\n",
    "                    batch_size=32,\n",
    "                    epochs=10,\n",
    "                    validation_data=(test_full_img, test_pathology))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the model\n",
    "model_cnn.save('DDSM2.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def eval_models(model, x_test, y_test, history):\n",
    "    \n",
    "    fig = plt.figure(figsize=[15, 15])\n",
    "    ax = fig.add_subplot(3, 1, 1)\n",
    "    ax.plot(history.history['loss'], label = 'Overall Loss')\n",
    "    ax.legend()\n",
    "    ax.set_title('Training Loss')\n",
    "\n",
    "    ax = fig.add_subplot(3, 1, 2)\n",
    "    ax.plot(history.history['val_loss'], label = 'Overall Loss')\n",
    "    ax.legend()\n",
    "    ax.set_title('Validation Loss')\n",
    "    \n",
    "    ax = fig.add_subplot(3, 1, 3)\n",
    "    ax.plot(history.history['categorical_accuracy'], label = ' training accuracy')\n",
    "    ax.plot(history.history['val_'+'categorical_accuracy'], label = ' test accuracy')\n",
    "    ax.legend()\n",
    "    ax.set_title('Accuracy')\n",
    "\n",
    "eval_models(model_cnn, test_full_img, test_pathology, history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Confusion_matrix (model, x_test, y_test):\n",
    "\n",
    "    pred = model.predict(x_test);\n",
    "    indexes = tf.argmax(pred, axis=1)\n",
    "    i = tf.cast([], tf.int32)\n",
    "    indexes = tf.gather_nd(indexes, i)\n",
    "    \n",
    "    cm = confusion_matrix(y_test, indexes)\n",
    "    fig = plt.figure(figsize=[10, 10])\n",
    "    ax = fig.add_subplot(1, 1, 1)\n",
    "    c = ConfusionMatrixDisplay(cm)\n",
    "    c.plot(ax = ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = model_cnn.predict(test_full_img)\n",
    "indexes = tf.argmax(pred, axis=1)\n",
    "i = tf.cast([], tf.int32)\n",
    "indexes = tf.gather_nd(indexes, i)\n",
    "\n",
    "cm = confusion_matrix(test_target['encode'], indexes)\n",
    "fig = plt.figure(figsize=[10, 10])\n",
    "ax = fig.add_subplot(1, 1, 1)\n",
    "c = ConfusionMatrixDisplay(cm)\n",
    "c.plot(ax = ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Apparently, our confusion matrix show really bad prediction with the current model. One of the reason would be the assessment 4 which the benign and malignant it's a bit tricky to be classified. Let's have a look with the number of pathology for assessment 4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_4.pathology.value_counts().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see from the plot above, the assessment 4 has a fairly balanced benign and malignant class (which indecisive) and made the classifier harder to learn about this class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ROC Curve\n",
    "pred = model_cnn.predict(test_full_img)\n",
    "indexes = tf.argmax(pred, axis=1)\n",
    "i = tf.cast([], tf.int32)\n",
    "indexes = tf.gather_nd(indexes, i)\n",
    "fpr_keras, tpr_keras, thresholds_keras = roc_curve(test_target['encode'], indexes)\n",
    "auc_keras = auc(fpr_keras, tpr_keras)\n",
    "\n",
    "plt.figure(1)\n",
    "plt.plot(fpr_keras, tpr_keras)\n",
    "plt.xlabel('False positive rate')\n",
    "plt.ylabel('True positive rate')\n",
    "plt.title('ROC curve')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
